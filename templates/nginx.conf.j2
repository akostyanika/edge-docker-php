{% if NGINX_PORT == '80' %}
user nginx;
{% endif %}

worker_processes auto;
daemon off;
error_log stderr notice;
error_log /var/log/nginx/error.log notice;
pcre_jit on;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
    multi_accept on;
}

http {
    server_tokens off;
    access_log off;

    proxy_hide_header X-Powered-By;

    proxy_buffers            4 256k;
    proxy_buffer_size          128k;
    proxy_busy_buffers_size    256k;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    charset utf-8;

    client_max_body_size 0;
    client_body_buffer_size 20m;

    client_body_temp_path /tmp/client_temp;
    proxy_temp_path /tmp/proxy_temp_path;
    fastcgi_temp_path /tmp/fastcgi_temp;
    uwsgi_temp_path /tmp/uwsgi_temp;
    scgi_temp_path /tmp/scgi_temp;

    keepalive_timeout 10;

    fastcgi_keep_conn on;

    index index.php index.html;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    resolver 8.8.4.4 8.8.8.8;
    resolver_timeout 10s;

    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_min_length 1000;
    gzip_types application/ecmascript;
    gzip_types application/javascript;
    gzip_types application/json;
    gzip_types application/pdf;
    gzip_types application/postscript;
    gzip_types application/x-javascript;
    gzip_types application/xml;
    gzip_types image/svg+xml;
    gzip_types text/css;
    gzip_types text/csv;
    gzip_types text/javascript;
    gzip_types text/json;
    gzip_types text/plain;
    gzip_types text/xml;

    map $sent_http_content_type $expires {
      "text/html"                 epoch;
      "text/html; charset=utf-8"  epoch;
      default                     off;
    }

    map $http_accept $htmltonode {
      "text/html"  node_backend;
      default      fastcgi_backend;
    }

    server {
      listen {{ NGINX_PORT }} default_server reuseport;

      port_in_redirect off;

      include /etc/nginx/conf.d/{{ NGINX_CONF }}.conf;

      location = /healthz                 { access_log off; default_type text/plain; return 200 "healthy\n"; }
      location ~ /\.                      { deny all; log_not_found off; }
      location ~\.(ini|log|conf)$         { deny all; }
      location = /Dockerfile              { deny all; }
      location = /vendor/                 { deny all; }
    }

    upstream fastcgi_backend {
        server 127.0.0.1:8000;
    }

    upstream node_backend {
        server 127.0.0.1:{{ NODE_PORT }};
    }
}
